Assignment 5: 54/60

DocCompare.java: 39/40
  Works well and the logic is good.  
  There is no need to convert to a TreeSet first -- duplicates
  can be avoided directly during the comparison.

OnlineQuery.java: 15/20
  Implementation for Linked List is, technically, a doubly
  linked list.  

  Should have Item extend Comparable.

  For remove, can merge the different cases into one:

  ptr = first; prev = null;
  while (ptr != null) {
    if (ptr.item.equals(item)) {
       if (prev == null) first = ptr.next;
       else prev.next = ptr.next;
       break;
    }
    prev = ptr;
    ptr = ptr.next;
  }


Assignment 4: 54/65

CommentStripper.java: 15/15
  Nice logic that does not use new states!

Combination.java: 8/15
  Misses the memoization technique.  Use a two dimensional array to
  store already computed results.

Time.java: 31/35
  Overall pretty good, but better design to store the string of
  the text, and the two points of the line as class variables.

Assignment 3: 87/90

Playnew.java: 10/10
  Put show() before the first drawing to speed up the program execution.

FunctionGraphNeww.java: 15/15
  Good program.  

IFS.java: 12/15
  Should add an extra point to give the appearance of a third dimension.

Minvalue.java: 15/15

Maze.java: 35/35
  Very nice organization/structure.

=========================

Assignment 2: 46/50

PrimeSieveImpr.java: 15/15

BouncingBallNew.java: 31/35
  For collision detection, should use the anticipated position of the
  ball to check, not the current position.  As is, there are some
  awkward bounces occasionally.  Also, the collision checks can be
  embedded inside the loops for drawing -- this improves on the
  efficiency in a small way.

  It is not clear why there are two animation loops.

=========================

Assignment 1: 61/70

Lab Questions: 15/20
1. 3/3
2. 3/3
3. 3/3: Two pairs of integers.
4. 2/3: Since the four integers are correlated, the search space
   is on the order of N^4
5. 3/4: Not all the points are searched, depending on the beginning
   and ending points of b, c, and d.
6. 1/4: Provide more details.

Cube.java: 9/10
  Better to use a while loop, since the initial guess may already
  be the right answer.

Pythtriples.java: 9/10
  Be careful using break label.  It is convenient but most of the time
  it is better to think carefully about using loop control variables
  to terminate a loop.  For z, there is no need to go through the full
  loop once a Pythagorean Triple has been found.

Calend.java: 28/30
  Commandline arguments not quite right.  The extra "cal" is unnecessary.
  Overall logic looks good.