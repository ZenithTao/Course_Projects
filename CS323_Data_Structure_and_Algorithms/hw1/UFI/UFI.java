// Do not edit this file for homework.

// UFI = Union Find Interface, it resembles the book UF API.

// A Java interface cannot specify constructors, so we
// leave that part of the book API as just a comment.
// Recall all interface members are implicitly public.

public interface UFI
{
	// Constructor specifies the number N of disjoint items,
	// which will be identified as integers from 0 to N-1.
	// UFI(int N);
    
	// Return the id (leader) of the component containing p.
	int find(int p);
	
	// Return the number of connected components.
    int count();
	
	// Are items p and q in the same component?
    boolean connected(int p, int q);

	// Merge components containing p and q, if not already.
    void union(int p, int q);
    
    // The next two methods are not in the book, but they
    // are convenient for us.
    
    // return the number of items (N in the constructor).
    public int size();
    
    // Report the sum, over all items, of the depth of that
    // item.  The depth of an item is the number of steps from
    // that item to its root.   So, a root has depth 0.
    // This method is just for reporting the average depth,
    // it should not modify anything.
    int sumDepths();
}

